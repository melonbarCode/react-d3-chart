{"version":3,"sources":["components/BarChart/population.csv","components/BarChart/BarChart.js","App.js","reportWebVitals.js","index.js"],"names":["BarChart","props","barChartRef","useRef","useEffect","svg","select","current","width","clientWidth","height","clientHeight","console","log","margin","innerWidth","innerHeight","xValue","d","population","yValue","country","csv","data","then","forEach","sort","a","b","xScale","scaleLinear","domain","max","range","yScale","scaleBand","map","padding","g","append","attr","call","axisLeft","axisBottom","selectAll","enter","bandwidth","render","BarChartStyledWrapper","className","ref","styled","div","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2MAAe,MAA0B,uC,eC+E1BA,EAlEE,SAACC,GAChB,IAAMC,EAAcC,iBAAO,MA0D3B,OAxDAC,qBAAU,WAKR,IAAMC,EAAMC,YAAOJ,EAAYK,SACzBC,EAAQN,EAAYK,QAAQE,YAC5BC,EAASR,EAAYK,QAAQI,aAEnCC,QAAQC,IAAIL,EAAOE,GACnB,IAAMI,EAAgB,GAAhBA,EAAiD,IACjDC,EAAaP,EAAQM,EADM,GAE3BE,EAAcN,EAASI,EAFgB,GAGvCG,EAAS,SAACC,GAAD,OAAOA,EAAEC,YAClBC,EAAS,SAACF,GAAD,OAAOA,EAAEG,SAiCxBC,YAAIC,GAAMC,MAAK,SAACD,GACdA,EAAKE,SAAQ,SAACP,GACZA,EAAEC,WAA6B,KAAfD,EAAEC,cAEpBI,EAAKG,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAET,WAAaQ,EAAER,cAnCxB,SAACI,GACd,IAAMM,EAASC,cACZC,OAAO,CAAC,EAAGC,YAAIT,EAAMN,KACrBgB,MAAM,CAAC,EAAGlB,IAGPmB,EAASC,cACZJ,OAAOR,EAAKa,IAAIhB,IAChBa,MAAM,CAAC,EAAGjB,IACVqB,QAAQ,IAILC,EAAIjC,EACPkC,OAAO,KACPC,KAAK,YAFE,oBAEwB1B,EAFxB,YAEuCA,EAFvC,MAIVwB,EAAEC,OAAO,KAAKE,KAAKC,YAASR,IAC5BI,EAAEC,OAAO,KACNE,KAAKE,YAAWd,IAChBW,KAAK,YAFR,uBAEqCxB,EAFrC,MAIAsB,EAAEM,UAAU,QACTrB,KAAKA,GACLsB,QACAN,OAAO,QACPC,KAAK,KAAK,SAACtB,GAAD,OAAOgB,EAAOd,EAAOF,OAC/BsB,KAAK,SAAS,SAACtB,GAAD,OAAOW,EAAOZ,EAAOC,OACnCsB,KAAK,SAAUN,EAAOY,aAQzBC,CAAOxB,QAER,IAGD,cAACyB,EAAD,CAAuBC,UAAU,mBAAjC,SACE,qBAAKA,UAAU,eAAeC,IAAKhD,OAOnC8C,EAAwBG,IAAOC,IAAV,+Q,OClEZC,MAZf,WACE,OACE,sBAAKJ,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,2BACA,gCACE,qBAAKA,UAAU,cAAf,uBACA,cAAC,EAAD,WCGOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASf,OACP,cAAC,IAAMgB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.3010de58.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/population.e7e8d498.csv\";","import { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  select,\r\n  csv,\r\n  scaleLinear,\r\n  max,\r\n  scaleBand,\r\n  axisLeft,\r\n  axisBottom,\r\n} from \"d3\";\r\nimport data from \"./population.csv\";\r\nimport styled from \"styled-components\";\r\n\r\nconst BarChart = (props) => {\r\n  const barChartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // csv('papulation.csv').then((data) => {\r\n    //   console.log(\"data\", data);\r\n    // });\r\n\r\n    const svg = select(barChartRef.current);\r\n    const width = barChartRef.current.clientWidth; //+svg.attr(\"width\");\r\n    const height = barChartRef.current.clientHeight; //+svg.attr(\"height\");\r\n\r\n    console.log(width, height);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 100 };\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n    const xValue = (d) => d.population;\r\n    const yValue = (d) => d.country;\r\n\r\n    const render = (data) => {\r\n      const xScale = scaleLinear()\r\n        .domain([0, max(data, xValue)])\r\n        .range([0, innerWidth]);\r\n      // const xAxis = axisBottom(xScale);\r\n\r\n      const yScale = scaleBand()\r\n        .domain(data.map(yValue))\r\n        .range([0, innerHeight])\r\n        .padding(0.3);\r\n\r\n      // const yAxis = axisLeft(yScale);\r\n\r\n      const g = svg\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n      g.append(\"g\").call(axisLeft(yScale));\r\n      g.append(\"g\")\r\n        .call(axisBottom(xScale))\r\n        .attr(\"transform\", `translate(0, ${innerHeight})`);\r\n\r\n      g.selectAll(\"rect\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"y\", (d) => yScale(yValue(d)))\r\n        .attr(\"width\", (d) => xScale(xValue(d)))\r\n        .attr(\"height\", yScale.bandwidth());\r\n    };\r\n\r\n    csv(data).then((data) => {\r\n      data.forEach((d) => {\r\n        d.population = +d.population * 1000;\r\n      });\r\n      data.sort((a, b) => b.population - a.population);\r\n      render(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <BarChartStyledWrapper className=\"barchart-section\">\r\n      <svg className=\"barchart-svg\" ref={barChartRef}></svg>\r\n    </BarChartStyledWrapper>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n\r\nconst BarChartStyledWrapper = styled.div`\r\n  margin: 0px auto;\r\n  overflow: hidden;\r\n  height: 900px;\r\n  width: 1600px;\r\n  text-align: center;\r\n\r\n  .barchart-svg {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  rect {\r\n    fill: steelblue;\r\n  }\r\n\r\n  text {\r\n    font-size: 1.4em;\r\n  }\r\n`;\r\n","import BarChart from \"./components/BarChart\";\nimport \"./styles/App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">D3 WITH REACT</header>\n      <div>\n        <div className=\"chart-title\">BAR CHART</div>\n        <BarChart />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}