{"version":3,"sources":["components/BarChart/population.csv","components/BarChart/BarChart.js","components/BarChartCustom/population.csv","components/BarChartCustom/BarChartCustom.js","components/ScatterChart/ScatterChart.js","data/population.csv","components/Navbar/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["BarChart","props","barChartRef","useRef","useEffect","svg","select","current","width","clientWidth","height","clientHeight","console","log","margin","innerWidth","innerHeight","xValue","d","population","yValue","country","csv","data","then","forEach","sort","a","b","xScale","scaleLinear","domain","max","range","yScale","scaleBand","map","padding","g","append","attr","call","axisLeft","axisBottom","selectAll","enter","bandwidth","render","BarChartStyledWrapper","className","ref","styled","div","BarChartCustom","xAxis","tickFormat","number","format","replace","tickSize","remove","xAxisG","text","ScatterChart","acceleration","cylinders","displacement","horsepower","mpg","weight","year","extent","nice","tickPadding","yAxis","style","Navbar","useMemo","NavbarStyledWrapper","to","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20ef1349.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/population.e7e8d498.csv\";","import { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  select,\r\n  csv,\r\n  scaleLinear,\r\n  max,\r\n  scaleBand,\r\n  axisLeft,\r\n  axisBottom,\r\n} from \"d3\";\r\nimport data from \"./population.csv\";\r\nimport styled from \"styled-components\";\r\n\r\nconst BarChart = (props) => {\r\n  const barChartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // csv('papulation.csv').then((data) => {\r\n    //   console.log(\"data\", data);\r\n    // });\r\n\r\n    const svg = select(barChartRef.current);\r\n    const width = barChartRef.current.clientWidth; //+svg.attr(\"width\");\r\n    const height = barChartRef.current.clientHeight; //+svg.attr(\"height\");\r\n\r\n    console.log(width, height);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 100 };\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n    const xValue = (d) => d.population;\r\n    const yValue = (d) => d.country;\r\n\r\n    const render = (data) => {\r\n      const xScale = scaleLinear()\r\n        .domain([0, max(data, xValue)])\r\n        .range([0, innerWidth]);\r\n      // const xAxis = axisBottom(xScale);\r\n\r\n      const yScale = scaleBand()\r\n        .domain(data.map(yValue))\r\n        .range([0, innerHeight])\r\n        .padding(0.3);\r\n\r\n      // const yAxis = axisLeft(yScale);\r\n\r\n      const g = svg\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n      g.append(\"g\").call(axisLeft(yScale));\r\n      g.append(\"g\")\r\n        .call(axisBottom(xScale))\r\n        .attr(\"transform\", `translate(0, ${innerHeight})`);\r\n\r\n      g.selectAll(\"rect\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"y\", (d) => yScale(yValue(d)))\r\n        .attr(\"width\", (d) => xScale(xValue(d)))\r\n        .attr(\"height\", yScale.bandwidth());\r\n    };\r\n\r\n    csv(data).then((data) => {\r\n      data.forEach((d) => {\r\n        d.population = +d.population * 1000;\r\n      });\r\n      data.sort((a, b) => b.population - a.population);\r\n      render(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <BarChartStyledWrapper className=\"barchart-section\">\r\n      <svg className=\"barchart-svg\" ref={barChartRef}></svg>\r\n    </BarChartStyledWrapper>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n\r\nconst BarChartStyledWrapper = styled.div`\r\n  margin: 0px auto;\r\n  margin-bottom: 50px;\r\n  overflow: hidden;\r\n  height: 900px;\r\n  width: 1600px;\r\n  text-align: center;\r\n\r\n  .barchart-svg {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  rect {\r\n    fill: steelblue;\r\n  }\r\n\r\n  text {\r\n    font-size: 1.4em;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/population.e7e8d498.csv\";","import { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  select,\r\n  csv,\r\n  scaleLinear,\r\n  max,\r\n  scaleBand,\r\n  axisLeft,\r\n  axisBottom,\r\n  format,\r\n} from \"d3\";\r\nimport data from \"./population.csv\";\r\nimport styled from \"styled-components\";\r\n\r\nconst BarChartCustom = (props) => {\r\n  const barChartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // csv('papulation.csv').then((data) => {\r\n    //   console.log(\"data\", data);\r\n    // });\r\n\r\n    \r\n    const render = (data) => {\r\n      const svg = select(barChartRef.current);\r\n      const width = barChartRef.current.clientWidth; //+svg.attr(\"width\");\r\n      const height = barChartRef.current.clientHeight; //+svg.attr(\"height\");\r\n      const margin = { top: 100, right: 20, bottom: 80, left: 200 };\r\n      const innerWidth = width - margin.left - margin.right;\r\n      const innerHeight = height - margin.top - margin.bottom;\r\n      const xValue = (d) => d.population;\r\n      const yValue = (d) => d.country;\r\n      const xScale = scaleLinear()\r\n        .domain([0, max(data, xValue)])\r\n        .range([0, innerWidth]);\r\n\r\n      const yScale = scaleBand()\r\n        .domain(data.map(yValue))\r\n        .range([0, innerHeight])\r\n        .padding(0.3);\r\n\r\n      const xAxisTickFormat = (number) =>\r\n        format(\".3s\")(number).replace(\"G\", \"B\");\r\n      const xAxis = axisBottom(xScale)\r\n        .tickFormat(xAxisTickFormat)\r\n        .tickSize(-innerHeight);\r\n\r\n      const g = svg\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n      //yAxis\r\n      g.append(\"g\")\r\n        .call(axisLeft(yScale))\r\n        .selectAll(\".domain ,.tick line\")\r\n        .remove();\r\n\r\n      const xAxisG = g\r\n        .append(\"g\")\r\n        .call(xAxis)\r\n        .attr(\"transform\", `translate(0, ${innerHeight})`);\r\n\r\n      xAxisG.select(\".domain\").remove();\r\n      xAxisG\r\n        .append(\"text\")\r\n        .attr(\"class\", \"axis-label\")\r\n        .attr(\"y\", 65)\r\n        .attr(\"x\", innerWidth / 2)\r\n        .attr(\"fill\", \"#000000\")\r\n        .text(\"Population\");\r\n\r\n      g.selectAll(\"rect\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"y\", (d) => yScale(yValue(d)))\r\n        .attr(\"width\", (d) => xScale(xValue(d)))\r\n        .attr(\"height\", yScale.bandwidth());\r\n\r\n      g.append(\"text\")\r\n        .attr(\"class\", \"title\")\r\n        .attr(\"y\", -50)\r\n        .text(\"Top Population Country\");\r\n    };\r\n\r\n    csv(data).then((data) => {\r\n      data.forEach((d) => {\r\n        d.population = +d.population * 1000;\r\n      });\r\n      data.sort((a, b) => b.population - a.population);\r\n      render(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <BarChartStyledWrapper className=\"barchart-section\">\r\n      <svg className=\"barchart-svg\" ref={barChartRef}></svg>\r\n    </BarChartStyledWrapper>\r\n  );\r\n};\r\n\r\nexport default BarChartCustom;\r\n\r\nconst BarChartStyledWrapper = styled.div`\r\n  margin: 0px auto;\r\n  overflow: hidden;\r\n  height: 900px;\r\n  width: 1600px;\r\n  text-align: center;\r\n  margin-bottom: 50px;\r\n\r\n  .barchart-svg {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  rect {\r\n    fill: steelblue;\r\n  }\r\n\r\n  text {\r\n    font-size: 3em;\r\n    font-family: sans-serif;\r\n    /* fill: #8e8883; */\r\n  }\r\n\r\n  .tick text {\r\n    /* fill: #8e8883; */\r\n    font-size: 2em;\r\n    fill: #635f5d;\r\n  }\r\n\r\n  .tick line {\r\n    stroke: #c0c0bb;\r\n  }\r\n\r\n  .axis-label {\r\n    font-size: 2.7em;\r\n    fill: #8e8883;\r\n  }\r\n\r\n  .title {\r\n    font-size: 3.3em;\r\n    fill: #8e8883;\r\n  }\r\n`;\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  select,\r\n  csv,\r\n  scaleLinear,\r\n  axisLeft,\r\n  axisBottom,\r\n  format,\r\n  extent,\r\n} from \"d3\";\r\nimport data from \"../../data/population.csv\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ScatterChart = (props) => {\r\n  const barChartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // acceleration: \"12\"\r\n    // cylinders: \"8\"\r\n    // displacement: \"307\"\r\n    // horsepower: \"130\"\r\n    // mpg: \"18\"\r\n    // name: \"chevrolet chevelle malibu\"\r\n    // origin: \"USA\"\r\n    // population: NaN\r\n    // weight: \"3504\"\r\n    // year: \"1970\"\r\n    const render = (data) => {\r\n      const svg = select(barChartRef.current);\r\n      const width = barChartRef.current.clientWidth; //+svg.attr(\"width\");\r\n      const height = barChartRef.current.clientHeight; //+svg.attr(\"height\");\r\n\r\n      const title = \"자동차 무게에 따른 마력 Scatter Chart\";\r\n\r\n      const xAxisLabel = \"마력\";\r\n      const yAxisLabel = \"무게\";\r\n\r\n      const margin = { top: 100, right: 20, bottom: 80, left: 200 };\r\n      const innerWidth = width - margin.left - margin.right;\r\n      const innerHeight = height - margin.top - margin.bottom;\r\n\r\n      const xValue = (d) => d.horsepower;\r\n      const yValue = (d) => d.weight;\r\n\r\n      const circleRadius = 18;\r\n\r\n      const xScale = scaleLinear()\r\n        .domain(extent(data, xValue))\r\n        .range([0, innerWidth])\r\n        .nice();\r\n\r\n      const yScale = scaleLinear()\r\n        .domain(extent(data, yValue))\r\n        .range([innerHeight, 0])\r\n        .nice();\r\n      // .padding(0.5);\r\n\r\n      // const xAxisTickFormat = (number) =>\r\n      //   format(\".3s\")(number).replace(\"G\", \"B\");\r\n\r\n      const xAxis = axisBottom(xScale)\r\n        // .tickFormat(xAxisTickFormat)\r\n        .tickSize(-innerHeight)\r\n        .tickPadding(30);\r\n\r\n      const g = svg\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n      const yAxis = axisLeft(yScale).tickSize(-innerWidth).tickPadding(30);\r\n\r\n      //yAxis\r\n      g.append(\"g\").call(yAxis).selectAll(\".domain\").remove();\r\n\r\n      const xAxisG = g\r\n        .append(\"g\")\r\n        .call(xAxis)\r\n        .attr(\"transform\", `translate(0, ${innerHeight})`);\r\n\r\n      const yAxisG = g.append(\"g\").call(yAxis);\r\n\r\n      yAxisG\r\n        .append(\"text\")\r\n        .attr(\"class\", \"axis-label\")\r\n        .attr(\"y\", -90)\r\n        .attr(\"x\", -innerHeight / 2)\r\n        .attr(\"fill\", \"#000000\")\r\n        .attr(\"transform\", `rotate(-90)`)\r\n        .style(\"text-anchor\", \"middle\")\r\n        .text(yAxisLabel);\r\n      // .attr(\"transform\", `translate(0, ${innerHeight})`);\r\n\r\n      xAxisG.select(\".domain\").remove();\r\n\r\n      xAxisG\r\n        .append(\"text\")\r\n        .attr(\"class\", \"axis-label\")\r\n        .attr(\"y\", 80)\r\n        .attr(\"x\", innerWidth / 2)\r\n        .attr(\"fill\", \"#000000\")\r\n        .text(xAxisLabel);\r\n\r\n      g.selectAll(\"circle\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"cy\", (d) => yScale(yValue(d)))\r\n        .attr(\"cx\", (d) => xScale(xValue(d)))\r\n        .attr(\"r\", circleRadius);\r\n\r\n      g.append(\"text\").attr(\"class\", \"title\").attr(\"y\", -50).text(title);\r\n    };\r\n\r\n    csv(\"https://vizhub.com/curran/datasets/auto-mpg.csv\").then((data) => {\r\n      data.forEach((d) => {\r\n        d.acceleration = +d.acceleration;\r\n        d.cylinders = +d.cylinders;\r\n        d.displacement = +d.displacement;\r\n        d.horsepower = +d.horsepower;\r\n        d.mpg = +d.mpg;\r\n        d.weight = +d.weight;\r\n        d.year = +d.year;\r\n      });\r\n\r\n      render(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <BarChartStyledWrapper className=\"barchart-section\">\r\n      <svg className=\"barchart-svg\" ref={barChartRef}></svg>\r\n    </BarChartStyledWrapper>\r\n  );\r\n};\r\n\r\nexport default ScatterChart;\r\n\r\nconst BarChartStyledWrapper = styled.div`\r\n  margin: 0px auto;\r\n  overflow: hidden;\r\n  height: 900px;\r\n  width: 1600px;\r\n  text-align: center;\r\n  margin-bottom: 50px;\r\n\r\n  .barchart-svg {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  circle {\r\n    fill: steelblue;\r\n    opacity: 0.5;\r\n  }\r\n\r\n  text {\r\n    font-size: 3em;\r\n    font-family: sans-serif;\r\n    /* fill: #8e8883; */\r\n  }\r\n\r\n  .tick text {\r\n    /* fill: #8e8883; */\r\n    font-size: 2em;\r\n    fill: #635f5d;\r\n  }\r\n\r\n  .tick line {\r\n    stroke: #c0c0bb;\r\n  }\r\n\r\n  .axis-label {\r\n    font-size: 2.7em;\r\n    fill: #8e8883;\r\n  }\r\n\r\n  .title {\r\n    font-size: 3.3em;\r\n    fill: #8e8883;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/population.e7e8d498.csv\";","import { useMemo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Navbar = (props) => {\r\n  return useMemo(\r\n    () => (\r\n      <NavbarStyledWrapper>\r\n        <Link className=\"link-item\" to={\"/scatter-chart\"}>\r\n          SCATTER CHART\r\n        </Link>\r\n        <Link className=\"link-item\" to={\"/bar-chart\"}>\r\n          BAR CHART\r\n        </Link>\r\n      </NavbarStyledWrapper>\r\n    ),\r\n    []\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n\r\nconst NavbarStyledWrapper = styled.div`\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n  margin-bottom: 30px;\r\n\r\n  .link-item {\r\n    list-style: none;\r\n    font-style: none;\r\n    text-decoration: none;\r\n    margin: 20px;\r\n    padding: 15px;\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n    color: #000000;\r\n    opacity: 1;\r\n    transition: opacity 0.5s ease-in-out;\r\n  }\r\n\r\n  .link-item:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n","import BarChart from \"./components/BarChart\";\nimport BarChartCustom from \"./components/BarChartCustom\";\nimport ScatterChart from \"./components/ScatterChart\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./styles/App.scss\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">D3 WITH REACT</header>\n        <Navbar />\n        <div>\n          <Switch>\n            <Route\n              path=\"/bar-chart\"\n              exact\n              component={(props) => {\n                return (\n                  <>\n                    <div className=\"chart-title\">BAR CHART</div>\n                    <BarChart />\n                    <div className=\"chart-title\">BAR CUSTOM CHART</div>\n                    <BarChartCustom />\n                  </>\n                );\n              }}\n            />\n            <Route\n              path=\"/\"\n              component={(props) => {\n                return (\n                  <>\n                    <div className=\"chart-title\">SCATTER CHART</div>\n                    <ScatterChart />\n                  </>\n                );\n              }}\n            />\n          </Switch>\n          {/* <div className=\"chart-title\">BAR CHART</div>\n        <BarChart />\n        <div className=\"chart-title\">BAR CUSTOM CHART</div>\n        <BarChartCustom />\n        <div className=\"chart-title\">SCATTER CHART</div>\n        <ScatterChart /> */}\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}